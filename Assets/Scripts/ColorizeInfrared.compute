#pragma kernel main

float3 rgb_to_hsv(float3 rgb) {
    float cmax = max(rgb.r, max(rgb.g, rgb.b));
    float cmin = min(rgb.r, max(rgb.g, rgb.b));
    float diff = cmax - cmin;
  
    float h;
    float s;
    float v = cmax;

    if (cmax == cmin) {
        h = 0;
    }
    else if (cmax == rgb.r) {
        h = float(uint(60.0 * ((rgb.g - rgb.b) / diff) + 360.0) % 360) / 359.0;
    }
    else if (cmax == rgb.g) {
        h = float(uint(60.0 * ((rgb.b - rgb.r) / diff) + 120.0) % 360) / 359.0;
    }
    else if (cmax == rgb.b) {
        h = float(uint(60.0 * ((rgb.r - rgb.g) / diff) + 240.0) % 360) / 359.0;
    }

    if (cmax == 0) {
        s = 0.0;
    }
    else {
        s = diff / cmax;
    }
    return float3(h, s, v);
}
float3 hsv_to_rgb(float3 hsv){
    float h = hsv.r;
    float s = hsv.g;
    float v = hsv.b;

    float c = s * v;
    float x = c * (1.0 - abs(float(uint(h * 6.0 * 128.0) % (2 * 128)) / 128.0 - 1.0));
    float m = v - c;

    const float r1 = 1.0 * 60.0 / 360.0;
    const float r2 = 2.0 * 60.0 / 360.0;
    const float r3 = 3.0 * 60.0 / 360.0;
    const float r4 = 4.0 * 60.0 / 360.0;
    const float r5 = 5.0 * 60.0 / 360.0;

    float3 rgb;
         if (h < r1) { rgb = float3(c, x, 0.0); }
    else if (h < r2) { rgb = float3(x, c, 0.0); }
    else if (h < r3) { rgb = float3(0.0, c, x); }
    else if (h < r4) { rgb = float3(0.0, x, c); }
    else if (h < r5) { rgb = float3(x, 0.0, c); }
    else             { rgb = float3(c, 0.0, x); }

    return rgb + float3(m, m, m);
}
float boost(float i) {
    i -= 1.0;
    i *= i;
    i = 1.0 - i;
    return clamp(i, 0.0, 1.0);
}

sampler2D color;
float4 box;
RWTexture2D<float4> result;

[numthreads(8,8,1)]
void main(uint2 id : SV_DispatchThreadID)
{
    float x = id.x / 512.0 * box.z + box.x;
    float y = (511 - id.y) / 512.0 * box.w + box.y;
    float4 c = tex2Dgrad(color, float2(x, y), 0.0, 0.0);
    float3 hsv = rgb_to_hsv(c.rgb);
    float3 rgb = hsv_to_rgb(float3(hsv.r, boost(hsv.g), result[id].r + 0.3 * hsv.b));
    result[id] = float4(rgb.rgb, 1.0);
}
