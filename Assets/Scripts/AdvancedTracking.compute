#pragma kernel main0

// code from AI (https://huggingface.co/chat)
// float3 combine(float3 c, float l) {
//     float3 cmax = max(c, max(c.bgr, c.ggb));
//     float3 cmin = min(c, min(c.bgr, c.ggb));
//     float l_val = (cmax + cmin) * 0.5;
//     float s_val, h_val;
//     if (cmax == cmin) {
//        h_val = 0.0;
//        s_val = 0.0;
//     } else {
//         float chroma = cmax - cmin;
        
//         if (l_val <= 0.5) {
//             s_val = chroma / (cmax + cmin);
//         } else {
//             s_val = chroma / (2 - cmax - cmin);
//         }

//         float r_diff = ((cmax - c.r) / 6) + (chroma > 0 ? chroma : 0);
//         float g_diff = ((cmax - c.g) / 6) + (chroma > 0 ? chroma : 0);
//         float b_diff = ((cmax - c.b) / 6) + (chroma > 0 ? chroma : 0);

//         if (c.r == cmax) {
//            h_val = b_diff - g_diff;
//         } else if (c.g == cmax) {
//            h_val = (1.0/3.0) + r_diff - b_diff;
//         } else {
//            h_val = (2.0/3.0) + g_diff - r_diff;
//         }

//         while (h_val < 0.0) h_val += 1.0;
//         while (h_val >= 1.0) h_val -= 1.0;
//     }

//     // Adjust saturation based on target lightness
//     float delta_L = l_val - l;
//     if (delta_L < 0.0) {
//       delta_L = 0.0;
//     }
//     float adj_sat = max(0.0, s_val - delta_L);

//     // New HSL color components
//     float3 hsl = float3(h_val, adj_sat, l);

//     return mix(float3(l), max(float3(l), abs(hsl.bg - hsl.rr)), hsl.g * (1.0 - abs(2.0 * l - 1.0)));
// }

sampler2D color;
sampler2D infrared;
float4 color_box;
float4 infrared_box;

RWTexture2D<float4> output;

[numthreads(8,8,1)]
void main0(uint2 id : SV_DispatchThreadID)
{
    float cx = id.x / 512.0 * color_box.z + color_box.x;
    float cy = id.y / 512.0 * color_box.w + color_box.y;
    float4 c = tex2Dgrad(color, float2(cx, cy), 0.0, 0.0);

    float ix = id.x / 512.0 * infrared_box.z + infrared_box.x;
    float iy = id.y / 512.0 * infrared_box.w + infrared_box.y;
    float i = tex2Dgrad(infrared, float2(ix, iy), 0.0, 0.0).r;
    i -= 1.0;
    i *= i;
    i *= i;
    i *= i;
    i = 1 - i;
    i = clamp(i, 0.0, 1.0);
    // i *= 4.0;

    // float4 pixel = float4(c.r, c.g, c.b, 1.0);
    // float4 pixel = float4(i * c.r, i * c.g, i * c.b, 1.0);
    float4 pixel = float4(i, i, i, 1.0);
    // float4 pixel = float4(c.r, i, c.b, 1.0);

    // output[id] = pixel;
    output[uint2(id.x, 511 - id.y)] = pixel;
}

